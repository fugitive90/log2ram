#!/bin/sh 

### BEGIN INIT INFO
# Provides:          log2ram
# Required-Start:    $syslog
# Required-Stop:     $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: log2ram prevents constant I/O writes on systems running on SSD or SDcard.
# Description:       This program mount /var/log as a tmpfs keeping logs in RAM.
#                    On the specified cron job, logs are writen to /var/log.hdd periodically.
#
# Modification:	   Script modified to be used by all LSB based systems.
#							Pre-check is made if log2ram is already mounted, which prevents over usage of RAM
### END INIT INFO

# Author: azlux <azlux@outlook.com>
# Modified by: fugitive90 <fugitiv3@protonmail.com>
# Compactible by all LSB based systems


PATH="/sbin:/bin/:/usr/bin/:/usr/local/bin"

LOG2RAM_LOG="/var/log.hdd/log2ram"

[ $( id -u ) -ne 0 ] && echo "Must be run as root. Exiting." && exit 2

# Load LSB functions
. /lib/lsb/init-functions

# Load config 
[ -f "/etc/log2ram.conf" ] && CONFIG="/etc/log2ram.conf" && . $CONFIG || log_failure_msg "Config file not found!"
[ -z $CONFIG ] && exit 2


is_safe () {
    [ -d "/var/log.hdd" ] || log_failure_msg "ERROR: /var/log.hdd doesn't exist!  Can't sync."
    [ -d "/var/log.hdd" ] || exit 1
}

sync_to_disk () {
    is_safe

    if [ "$USE_RSYNC" = true ]; then
        rsync -aXWv --delete --exclude log2ram.log --links "/var/log" "/var/log.hdd" || exit 2
    else
        cp -rfup "/var/log" -T "/var/log.hdd" || exit 2

    fi
	 return 0
}

sync_from_disk () {
    is_safe

    if [ ! -z `du -sh -t $SIZE "/var/log.hdd" | cut -f1` ]; then
        log_failure_msg "ERROR: RAM disk too small. Can't sync."
		  umount_log

		if [ "$MAIL" = true ]; then
			log_failure_msg "LOG2RAM : No place on RAM anymore, fallback on the disk"
			echo "LOG2RAM : No place on RAM anymore, fallback on the disk" | mail -s 'Log2Ram Error' root;
		fi
        exit 1
    fi

    if [ "$USE_RSYNC" = true ]; then
        rsync -aXWv --delete --exclude log2ram.log --links "/var/log.hdd" "/var/log" > "${LOG2RAM_LOG}.log" 2> "${LOG2RAM_LOG}.err"
    else
        cp -rfup "/var/log.hdd" -T "/var/log" > "${LOG2RAM_LOG}.log" 2> "${LOG2RAM_LOG}.err" 
    fi

	 return 0 
}


check_is_mounted ()
{
	local ec
	grep -q "log2ram" /proc/mounts 
   
	if	[ $? -eq 0  ] ; then
	  	return 0 	#log2ram  mounted
	else
		return 1		#log2ram not  mounted
	fi

}


umount_log ()
{
	local _rc_log
	local _rc_log_hdd

	check_is_mounted
	if [ $? -eq 0 ];then
		umount -l "/var/log" && _rc_log=0
		umount -l "/var/log.hdd" && _rc_log_hdd=0
		[ -n $_rc_log ] && [ -n $_rc_log_hdd  ] && log_success_msg "log2ram umounted."
	else
		log_warning_msg "Log2ram is not mounted"
	fi

}


do_start ()
{
	
   [ -d "/var/log.hdd" ] || mkdir "/var/log.hdd"
   test -f "${LOG2RAM_LOG}.*"  && rm "${LOG2RAM_LOG}.*"  
   
	check_is_mounted
	if [ $? -ne 0  ]; then
		mount --bind "/var/log" "/var/log.hdd"
   	mount --make-private "/var/log.hdd"
   	mount -t tmpfs -o nosuid,noexec,nodev,mode=0755,size=$SIZE log2ram "/var/log"
   	sync_from_disk && log_success_msg "Log2Ram is running"
		touch /var/log.hdd/log2ram.lock
	else
		log_warning_msg "Log2ram is already mounted."
		exit 2
	fi	

}
do_stop ()
{
	check_is_mounted 
	[  $? -eq 0 ] && sync_to_disk
	umount_log
}
do_reload ()
{
	check_is_mounted
	if [ $? -eq 0 ]; then
   	sync_to_disk
	   exit 0
	else
	  log_warning_msg "Log2ram not mounted. Files not synced!"
	  exit 2 
	fi

}

case "$1" in
  start)
	   do_start
		;;
  stop)
		do_stop
		;;
  reload)
		do_reload
		;;
	*)
      echo "Usage: log2ram {start|stop|reload}" >&2
      exit 1
      ;;
esac

exit 0
