#!/bin/sh 

### BEGIN INIT INFO
# Provides:          log2ram
# Required-Start:    $syslog
# Required-Stop:     $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: log2ram prevents constant I/O writes on systems running on SSD or SDcard.
# Description:       This program mount /var/log as a tmpfs keeping logs in RAM.
#                    On the specified cron job, logs are writen to /var/log.hdd periodically.
#
# Modification:	   Script modified to be used by all LSB based systems.
#							Pre-check is made if log2ram is already mounted, which prevents over usage of RAM
### END INIT INFO

# Author: azlux <azlux@outlook.com>
# Modified by: fugitive90 <fugitiv3@protonmail.com>
# Compactible by all LSB based systems

PATH="/sbin:/bin/:/usr/bin/:/usr/local/bin"
RAM_LOG="/var/log"
HDD_LOG="/var/hdd_log"
LOG2RAM_LOG="${HDD_LOG}/log2ram.log"
pidfile="/var/run/log2ram.pid"
CONFIG="/etc/log2ram.conf"

[ $( id -u ) -ne 0 ] && echo "Must be run as root. Exiting." && exit 2

# Load LSB functions
. /lib/lsb/init-functions



# Load config 
if [ ! -f "$CONFIG" ]; then
   log_failure_msg "Config file not found!" 
   exit 2
else
   . $CONFIG
fi



check_is_mounted ()
{
	if mount | grep -q "log2ram" ; then
     return 0 #log2ram  mounted
   else 
     return 1 #log2ram not mounted
   fi
   

}

umount_log ()
{
	local _rc_log

	check_is_mounted
	if [ $? -eq 0 ];then
       if ! umount  "$RAM_LOG" 2>/dev/null ; then
          umount -lv $RAM_LOG && log_success_message "${RAM_LOG} unmounted"      
       fi
	else
		log_warning_msg   "Log2ram is not mounted" 
      return 2
	fi
}

is_safe () {
    local _rc
    [ -d "$HDD_LOG" ] || _rc=2
    [ $_rc -eq 2 ] && log_failure_msg "$HDD_LOG doesn't exist!  Can't sync." && exit 2
}

sync_to_disk () {
    is_safe

    if [ "$USE_RSYNC" = true ]; then
        rsync -aXWv --delete --exclude log2ram.log --links ${RAM_LOG}/* "${HDD_LOG}" || log_failure_msg  2 "Unable to rsync"
    else
        cp -rfp  ${RAM_LOG}/* "${HDD_LOG}" || log_failure_msg  2 "Unable to copy files."
    fi
}

# Copy files from HDD to ram
sync_from_disk () {
    is_safe

    if [ ! -z $( /usr/bin/du -sh -t "$SIZE" "$HDD_LOG" | cut -f1 ) ]; then
        log_warning_msg  "RAM disk too small. Can't sync." && umount_log

		if [ "$MAIL" = true ]; then
			log_warning_msg  "LOG2RAM : No place on RAM anymore, fallback on the disk"
			echo "LOG2RAM : No place on RAM anymore, fallback on the disk" | mail -s 'Log2Ram Error' root;
		fi
        exit 1
    fi

    if [ "$USE_RSYNC" = true ]; then
        rsync -aXWv --delete --exclude log2ram.log --links ${HDD_LOG}/* "$RAM_LOG" > "${LOG2RAM_LOG}" 2> "${LOG2RAM_LOG}.log_failure_msg "
    else
        cp -rfp ${HDD_LOG}/* "$RAM_LOG" > "${LOG2RAM_LOG}" 2> "${LOG2RAM_LOG}.log_failure_msg " 
    fi

}


log2ram_start ()
{
	
   [ -d "$HDD_LOG" ] || mkdir "$HDD_LOG"
   [ -f ${LOG2RAM_LOG} ]  && rm ${LOG2RAM_LOG}.*  
  
   if [ ! -e $pidfile ] ; then
		check_is_mounted
      if [ $? -eq 1 ] ;then
        mount --bind ${RAM_LOG}/ ${HDD_LOG}/
        mount --make-private ${HDD_LOG}/
        mount -t tmpfs -o nosuid,noexec,mode=0755,size="$SIZE" log2ram "$RAM_LOG"
     	  sync_from_disk && info "Log2ram is running"
	     echo $$ > $pidfile
      else
        log_failure_msg  2 "Log2ram is not mounted." #FIXME 
      fi
   else
      log_failure_msg  2 "Log2ram is already running"
   fi

}

log2ram_stop ()
{
  if [ -e $pidfile ]; then
	check_is_mounted 
	[  $? -eq 0 ] && sync_to_disk
	umount_log && rm $pidfile
  else
    log_warning_msg   "Log2ram is not running."
    exit 2
  fi
}

log2ram_sync ()
{
	check_is_mounted
	if [ $? -eq 0 ]; then
   	sync_to_disk
	   exit 0
	else
	  log_warning_msg   "Log2ram not mounted. Files not synced!"
	  exit 2 
	fi

}


case "$1" in
  start)
	   log2ram_start
		;;
  stop)
		log2ram_stop
		;;
  reload)
		log2ram_reload
		;;
	*)
      echo "Usage: log2ram {start|stop|reload}" >&2
      exit 1
      ;;
esac

exit 0
